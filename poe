#!/bin/bash

version() {
    echo -n "4.4"
}

help() {
    echo "POE $(version)

“I have absolutely no pleasure in the stimulants in which I sometimes so madly
  indulge. It has not been in the pursuit of pleasure that I have periled life
  and reputation and reason. It has been the desperate attempt to escape from
  torturing memories, from a sense of insupportable loneliness and a dread of
  some strange impending doom.”
                                                            ― Edgar Allan Poe

SYNOPSIS
    poe -L [-d <signature>] [-l <length>]
    poe -X [-d <signature>]
    poe -F
    poe -h | -v

OPERATIONS
    -L   Examine Go source code and list suspicious constructs, leftovers
            from debug, check length of lines.
    -X   Remove debug leftovers.
    -F   Try to fix possible formatting directives basing on cmd/vet.
    -V   Show version.
    -h   Show help.

OPTIONS
    -d   Use specified value as debug signature [default: XXXXXX].
    -l   Use specified value as maximum line length [default: 80].
    -t   Use specified value as metalinter deadline timeout [default: 10].
    -v   Verbose output.
"
}

__main__() {
    if [ $# -eq 0 ]; then
        help
        exit 1
    fi

    local debug_signature="XXXXXX"
    local maximum_line_length="80"
    local metalinter_timeout="10"
    local verbose=false

    # parse additional options
    while getopts ":d:l:t:v" arg; do
        value="$OPTARG"
        case $arg in
            d)
                debug_signature=$value
                ;;
            l)
                maximum_line_length=$value
                ;;
            t)
                metalinter_timeout=$value
                ;;
            v)
                verbose=true
                ;;
        esac
    done

    # reset getopts
    local OPTIND

    # parse actions
    while getopts ":LXFVh" arg; do
        case $arg in
            L)
                serve_examine_code \
                    "$debug_signature" \
                    "$maximum_line_length" \
                    "$metalinter_timeout"
                ;;
            X)
                serve_remove_debug_leftovers "$debug_signature"
                ;;
            F)
                serve_fix_formatting_directives
                ;;
            V)
                serve_show_version
                ;;
            h)
                serve_show_help
                ;;
        esac
    done

    help
    exit 1
}

#############################################################################

serve_show_help() {
    help
    exit 0
}

serve_show_version() {
    version
    exit 0
}

serve_examine_code() {
    local debug_signature=$1
    local maximum_line_length=$2
    local metalinter_timeout=$3

    log "examining line length"

    local files=($(git ls-files))

    for file in "${files[@]}"; do
        if [ ! -f "$file" ]; then
            continue
        fi

        examine_line_length "$file" "$maximum_line_length"
    done

    log "examine debug leftovers"

    for file in "${files[@]}"; do
        if [ ! -f "$file" ]; then
            continue
        fi

        examine_debug_leftovers "$file" "$debug_signature"
    done

    log "running metalinter"
    run_metalinter "$metalinter_timeout"

    log "running vet"
    run_vet

    exit 0
}

serve_remove_debug_leftovers() {
    local signature=$1

    log "remove debug leftovers"
    sed -i "/$signature/d" ./*.go

    log "goimports"
    goimports -w .

    log "gofmt"
    gofmt -w .

    exit 0
}

serve_fix_formatting_directives() {
    log "fix possible formatting directives"

    fix_directives() {
        local last_file=""

        run_vet \
            | awk '/possible formatting directive/{print $1$6}' \
            | tr ':' ' ' \
            | while read -r file line method;
        do
            if [ "$last_file" != "$file" ]; then
                log "processing $file"
            fi
            last_file="$file"

            sed -i "${line}s/\.${method}(/\.${method}f(/" "$file"

            echo "$file"
        done
    }

    local fixes=$(fix_directives)
    local count=$(echo -n "$fixes" | wc -l)

    if [ "$count" -eq 0 ]; then
        log "nothing to do here"
    else
        log "fixed $count possible formatting directives"
    fi

    exit 0
}

#############################################################################

log() {
    if $verbose; then
        >&2 echo "# $*"
    fi
}

run_vet() {
    common_functions=(
        Panic
        Fatal
        Error
        Warning
        Notice
        Info
        Print
        Debug
    )

    printfuncs=""
    for raw_func in "${common_functions[@]}"
    do
        func="${raw_func}:0"
        funcf="${raw_func}f:0"

        if [ -n "$printfuncs" ]; then
            printfuncs="${printfuncs},"
        fi

        printfuncs="${printfuncs}${func},${funcf}"
    done

    go tool vet --printfuncs="$printfuncs" . 2>&1
}

run_metalinter() {
    local deadline=$1
    gometalinter -D vet --cyclo-over 15 --deadline ${deadline}s 2>&1
}

examine_line_length() {
    local file=$1
    local length=$2

    grep -q ".\{$length\}" "$file"
    if [ $? -eq 0 ]; then
        sed 's/\t/    /g' "$file" | grep --color ".\{$length\}" -A 2 -B 2 -n
    fi
}

examine_debug_leftovers() {
    local file=$1
    local signature=$2

    grep -q "$signature" "$file"
    if [ $? -eq 0 ]; then
        grep --color -H -C 2 -n "$signature" "$file"
    fi
}


__main__ "$@"
